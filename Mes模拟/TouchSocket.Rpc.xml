<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.Rpc</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Rpc.FromServicesAttribute">
            <summary>
            标识Rpc参数来自于IOC服务
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.IRpcActionFilter">
            <summary>
            Rpc行为过滤器。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.IRpcActionFilter.MutexAccessTypes">
            <summary>
            互斥访问类型。
            <para>
            当互斥访问类型或其派生类和本类型同时添加特性时，只有优先级更高的会生效。
            </para>
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcActionFilter.ExecutedAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult)">
            <summary>
            成功执行Rpc后。
            <para>如果修改<paramref name="invokeResult"/>的InvokeStatus，或Result。则会影响Rpc最终结果</para>
            </summary>
            <param name="callContext"></param>
            <param name="parameters"></param>
            <param name="invokeResult"></param>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcActionFilter.ExecutExceptionAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult,System.Exception)">
            <summary>
            执行Rpc遇见异常。
            <para>如果修改<paramref name="invokeResult"/>的InvokeStatus，或Result。则会影响Rpc最终结果</para>
            </summary>
            <param name="callContext"></param>
            <param name="parameters"></param>
            <param name="invokeResult"></param>
            <param name="exception"></param>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcActionFilter.ExecutingAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult)">
            <summary>
            在执行Rpc之前。
            <para>当<paramref name="invokeResult"/>的InvokeStatus不为<see cref="F:TouchSocket.Rpc.InvokeStatus.Ready"/>。则不会执行Rpc</para>
            <para>同时，当<paramref name="invokeResult"/>的InvokeStatus为<see cref="F:TouchSocket.Rpc.InvokeStatus.Success"/>。会直接返回结果</para>
            </summary>
            <param name="callContext"></param>
            <param name="parameters"></param>
            <param name="invokeResult"></param>
        </member>
        <member name="T:TouchSocket.Rpc.RpcActionFilterAttribute">
            <summary>
            RpcActionFilterAttribute
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcActionFilterAttribute.MutexAccessTypes">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcActionFilterAttribute.ExecutedAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcActionFilterAttribute.ExecutExceptionAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcActionFilterAttribute.ExecutingAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Rpc.RpcAttribute">
            <summary>
            Rpc方法属性基类
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.ClassCodeGenerator">
            <summary>
            类生成器
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.Exceptions">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.GeneratorFlag">
            <summary>
            生成代码
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.GenericConstraintTypes">
            <summary>
            生成泛型方法的约束
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.InvokeKey">
            <summary>
            调用键。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.MethodInvoke">
            <summary>
            是否仅以函数名调用，当为True是，调用时仅需要传入方法名即可。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcAttribute.MethodName">
            <summary>
            重新指定生成的函数名称。可以使用类似“JsonRpc_{0}”的模板格式。
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetDescription(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取注释信息
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetExtensionsMethodProxyCode(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取扩展的代理代码
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetGenericConstraintTypes">
            <summary>
            获取生成的函数泛型限定名称。默认<see cref="T:TouchSocket.Rpc.IRpcClient"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetInstanceProxyCode(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取生成实体类时的代码块
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetInterfaceProxyCode(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取接口的代理代码
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetInvokenKey(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取调用键
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetInvokeOption">
            <summary>
            获取调用配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetMethodName(TouchSocket.Rpc.RpcMethod,System.Boolean)">
            <summary>
            获取生成的函数名称
            </summary>
            <param name="rpcMethod"></param>
            <param name="isAsync"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetParameters(TouchSocket.Rpc.RpcMethod,System.Boolean@,System.Boolean@,System.Reflection.ParameterInfo[]@)">
            <summary>
            获取参数生成
            </summary>
            <param name="rpcMethod"></param>
            <param name="isOut"></param>
            <param name="isRef"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetProxyParameterName(System.Reflection.ParameterInfo)">
            <summary>
            从类型获取代理名
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcAttribute.GetReturn(TouchSocket.Rpc.RpcMethod,System.Boolean)">
            <summary>
            获取返回值
            </summary>
            <param name="rpcMethod"></param>
            <param name="isAsync"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.RpcProxyAttribute">
            <summary>
            代理类
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcProxyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcProxyAttribute.ClassName">
            <summary>
            代理类名
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.ClassCellCode">
            <summary>
            属性单元代码。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ClassCellCode.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ClassCellCode.Code">
            <summary>
            代码本体
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.ClassCodeGenerator">
            <summary>
            代码辅助类
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.#ctor(System.Reflection.Assembly[])">
            <summary>
            构造函数
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:TouchSocket.Rpc.ClassCodeGenerator.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ClassCodeGenerator.PropertyDic">
            <summary>
            属性类型字典。
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.AddTypeString(System.Type)">
            <summary>
            添加类型字符串
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.GetClassCellCodes">
            <summary>
            获取类单元参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.GetTypeFullName(System.Reflection.ParameterInfo)">
            <summary>
            获取类型全名
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.GetTypeFullName(System.Reflection.PropertyInfo)">
            <summary>
            获取类型全名
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.ClassCodeGenerator.GetTypeFullName(System.Reflection.FieldInfo)">
            <summary>
            获取类型全名
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.CodeGenerator">
            <summary>
            代码生成器
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.AddIgnoreProxyAssembly(System.Reflection.Assembly)">
            <summary>
            添加不需要代理的程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.AddIgnoreProxyType(System.Type)">
            <summary>
            添加不需要代理的类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.AddProxyAssembly(System.Reflection.Assembly)">
            <summary>
            添加需要代理的程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.AddProxyType(System.Type,System.Boolean)">
            <summary>
            添加代理类型
            </summary>
            <param name="type"></param>
            <param name="deepSearch"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.AddProxyType``1(System.Boolean)">
            <summary>
            添加代理类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deepSearch"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.ContainsType(System.Type)">
            <summary>
            是否包含类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.ConvertToCode(System.String,TouchSocket.Rpc.ServerCellCode[])">
            <summary>
            转换为cs代码。
            </summary>
            <param name="namespace"></param>
            <param name="serverCodes"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.Generator``2">
            <summary>
            生成代码代理
            </summary>
            <typeparam name="TServer">服务类型</typeparam>
            <typeparam name="TAttribute">属性标签</typeparam>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.Generator(System.Type,System.Type)">
            <summary>
            生成代码代理
            </summary>
            <param name="serverType">服务类型</param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.GetMethodId(System.Reflection.MethodInfo)">
            <summary>
            获取函数唯一Id
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.GetMethodInfos(System.Type,System.Collections.Generic.Dictionary{System.String,System.Reflection.MethodInfo}@)">
            <summary>
            获取Method
            </summary>
            <param name="type"></param>
            <param name="methods"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.GetRpcMethods``1">
            <summary>
            从类型获取函数实例
            </summary>
            <typeparam name="TServer"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.GetRpcMethods(System.Type,System.Type)">
            <summary>
            从类型获取函数实例
            </summary>
            <param name="serverFromType"></param>
            <param name="serverToType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.GetProxyCodes(System.String,System.Type[],System.Type[])">
            <summary>
            生成代理代码
            </summary>
            <param name="namespace"></param>
            <param name="serverTypes"></param>
            <param name="attributeTypes"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.CodeGenerator.TryGetProxyTypeName(System.Type,System.String@)">
            <summary>
            获取类型代理名称
            </summary>
            <param name="type"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.MethodCellCode">
            <summary>
            生成的代码单元
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.MethodCellCode.Name">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.MethodCellCode.CodeTemple">
            <summary>
            代码本体
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.MethodCellCode.InterfaceTemple">
            <summary>
            接口代码。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.MethodCellCode.ExtensionsTemple">
            <summary>
            扩展代码
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.ServerCellCode">
            <summary>
            服务单元代码
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ServerCellCode.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.IncludeInterface">
            <summary>
            包含接口
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.IncludeInstance">
            <summary>
            包含实例
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.IncludeExtension">
            <summary>
            包含扩展
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.Name">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.Methods">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ServerCellCode.ClassCellCodes">
            <summary>
            类参数集合。
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.ActionMap">
            <summary>
            服务映射图
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ActionMap.#ctor(System.Boolean)">
            <summary>
            服务映射图
            </summary>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:TouchSocket.Rpc.ActionMap.GetRpcMethod(System.String)">
            <summary>
            通过actionKey获取函数实例
            </summary>
            <param name="actionKey"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.ActionMap.TryGetRpcMethod(System.String,TouchSocket.Rpc.RpcMethod@)">
            <summary>
            通过actionKey获取函数实例
            </summary>
            <param name="actionKey"></param>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.CallContext">
            <summary>
            Rpc调用上下文的基本实现
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.CallContext.#ctor(System.Object,TouchSocket.Rpc.RpcMethod,TouchSocket.Core.IResolver)">
            <summary>
            CallContext
            </summary>
            <param name="caller"></param>
            <param name="rpcMethod"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:TouchSocket.Rpc.CallContext.#ctor">
            <summary>
            CallContext
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.CallContext.Caller">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Rpc.CallContext.RpcMethod">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Rpc.CallContext.Resolver">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Rpc.CallContext.Token">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Rpc.CallContext.Cancel">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Rpc.FeedbackType">
            <summary>
            反馈类型
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.FeedbackType.OnlySend">
            <summary>
            仅发送
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.FeedbackType.WaitSend">
            <summary>
            等待，直到发送抵达
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.FeedbackType.WaitInvoke">
            <summary>
            等待，直到调用完成
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.InvokeOption">
            <summary>
            Rpc调用设置
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.InvokeOption.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.InvokeOption.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.OnlySend">
            <summary>
            默认设置。
            Timeout=5000ms
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.WaitInvoke">
            <summary>
            默认设置。
            Timeout=5000ms
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.WaitSend">
            <summary>
            默认设置。
            Timeout=5000 ms
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.FeedbackType">
            <summary>
            调用反馈
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.Timeout">
            <summary>
            调用超时，
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeOption.Token">
            <summary>
            可以取消的调用令箭
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.InvokeResult">
            <summary>
            调用结果
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeResult.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeResult.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.InvokeResult.Result">
            <summary>
            执行返回值结果
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcMethod">
            <summary>
            Rpc函数实例
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            实例化一个Rpc调用函数，并在方法声明的类上操作
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.#ctor(System.Reflection.MethodInfo,System.Type,System.Type)">
            <summary>
            实例化一个Rpc调用函数，并在指定类上操作
            </summary>
            <param name="method"></param>
            <param name="serverFromType"></param>
            <param name="serverToType"></param>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.IsEnable">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ParameterNames">
            <summary>
            参数名集合
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ParameterTypes">
            <summary>
            参数类型集合，已处理out及ref，无参数时为空集合，
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.HasCallContext">
            <summary>
            是否包含调用上下文
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.GetNormalParameters">
            <summary>
            获取常规Rpc参数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.RpcAttributes">
            <summary>
            Rpc属性集合
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ServerFromType">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ServerRpcAttributes">
            <summary>
            Rpc服务属性集合
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ServerToType">
            <summary>
            实例类型
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcMethod.ToMethodInfo">
            <summary>
            实现方法。
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.GetAttribute``1">
            <summary>
            获取指定类型属性标签
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.GetAttribute(System.Type)">
            <summary>
            获取指定类型属性标签
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.GetDescription">
            <summary>
            描述属性
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcMethod.GetFilters">
            <summary>
            筛选器
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcParameter">
            <summary>
            Rpc参数
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcParameter.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Rpc参数
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.ParameterInfo">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.Type">
            <summary>
            参数类型，已处理out或者ref
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.IsCallContext">
            <summary>
            是否为调用上下文
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.IsFromServices">
            <summary>
            标识参数是否应该来自于服务
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcParameter.IsByRef">
            <summary>
            包含Out或者Ref
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcServer">
            <summary>
            Rpc范围类
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcServerProvider">
            <summary>
            RpcServerProvider
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcServerProvider.#ctor(TouchSocket.Core.IResolver,TouchSocket.Core.ILog,TouchSocket.Rpc.RpcStore)">
            <summary>
            RpcServerProvider
            </summary>
            <param name="containerProvider"></param>
            <param name="logger"></param>
            <param name="rpcStore"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcServerProvider.Execute(TouchSocket.Rpc.ICallContext,System.Object[])">
            <summary>
            执行Rpc
            </summary>
            <param name="ps"></param>
            <param name="callContext"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcServerProvider.ExecuteAsync(TouchSocket.Rpc.ICallContext,System.Object[])">
            <summary>
            异步执行Rpc
            </summary>
            <param name="ps"></param>
            <param name="callContext"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcServerProvider.GetMethods">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Rpc.RpcStore">
            <summary>
            Rpc仓库
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.#ctor(TouchSocket.Core.IRegistrator)">
            <summary>
            实例化一个Rpc仓库。
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.RpcStore.ServerTypes">
            <summary>
            服务类型
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.GetAllMethods">
            <summary>
            获取所有已注册的函数。
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.GetProxyCodes(System.String,System.Type[])">
            <summary>
            本地获取代理
            </summary>
            <param name="namespace"></param>
            <param name="attrbuteTypes"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.GetProxyCodes``1(System.String)">
            <summary>
            获取生成的代理
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="namespace"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.GetProxyInfo(System.Type[])">
            <summary>
            从本地获取代理
            </summary>
            <param name="attrbuteType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.GetServerRpcMethods(System.Type)">
            <summary>
            获取服务类型对应的服务方法。
            </summary>
            <param name="serverType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.RegisterServer(System.Type,TouchSocket.Rpc.IRpcServer)">
            <summary>
            注册为单例服务
            </summary>
            <param name="serverFromType"></param>
            <param name="rpcServer"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStore.RegisterServer(System.Type,System.Type)">
            <summary>
            注册服务
            </summary>
            <param name="serverFromType"></param>
            <param name="serverToType"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.TransientRpcServer`1">
            <summary>
            TransientRpcServer
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.TransientRpcServer`1.CallContext">
            <summary>
            调用上下文。
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.TransientRpcServer">
            <summary>
            TransientRpcServer
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.TransientRpcServer.CallContext">
            <summary>
            调用上下文。
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.CodeGeneratorFlag">
            <summary>
            代码生成标识
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.ExtensionSync">
            <summary>
            生成扩展同步代码
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.ExtensionAsync">
            <summary>
            生成扩展异步代码
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.InstanceSync">
            <summary>
            生成实例类同步代码（源代码生成无效）
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.InstanceAsync">
            <summary>
            生成实例类异步代码（源代码生成无效）
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.InterfaceSync">
            <summary>
            生成接口同步代码
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.CodeGeneratorFlag.InterfaceAsync">
            <summary>
            生成接口异步代码
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.InvokeStatus">
            <summary>
            调用状态
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.Ready">
            <summary>
            就绪
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.UnFound">
            <summary>
            未找到服务
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.UnEnable">
            <summary>
            不可用
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.Success">
            <summary>
            成功调用
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.InvocationException">
            <summary>
            调用内部异常
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.InvokeStatus.Exception">
            <summary>
            其他异常
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcException">
            <summary>
            Rpc异常
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:TouchSocket.Rpc.RpcInvokeException">
            <summary>
            Rpc调用异常
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcInvokeException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcInvokeException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcInvokeException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcInvokeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:TouchSocket.Rpc.RpcClientExtension">
            <summary>
            RpcClientExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeT``1(TouchSocket.Rpc.IRpcClient,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc cref="M:TouchSocket.Rpc.IRpcClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])"/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeT``1(TouchSocket.Rpc.IRpcClient,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <inheritdoc cref="M:TouchSocket.Rpc.IRpcClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])"/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeTAsync``1(TouchSocket.Rpc.IRpcClient,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc cref="M:TouchSocket.Rpc.IRpcClient.InvokeAsync(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])"/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeT``1(TouchSocket.Rpc.ITargetRpcClient,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc cref="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])"/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeT``1(TouchSocket.Rpc.ITargetRpcClient,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <inheritdoc cref="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])"/>
        </member>
        <member name="M:TouchSocket.Rpc.RpcClientExtension.InvokeTAsync``1(TouchSocket.Rpc.ITargetRpcClient,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc cref="M:TouchSocket.Rpc.ITargetRpcClient.InvokeAsync(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])"/>
        </member>
        <member name="T:TouchSocket.Rpc.RpcContainerExtension">
            <summary>
            ContainerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcContainerExtension.AddRpcStore(TouchSocket.Core.IRegistrator,System.Action{TouchSocket.Rpc.RpcStore})">
            <summary>
            向容器中添加<see cref="T:TouchSocket.Rpc.RpcStore"/>。
            </summary>
            <param name="registrator"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcContainerExtension.AddRpcServerProvider``1(TouchSocket.Core.IRegistrator)">
            <summary>
            添加Rpc服务器提供者
            </summary>
            <typeparam name="TRpcServerProvider"></typeparam>
            <param name="registrator"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcContainerExtension.AddRpcServerProvider(TouchSocket.Core.IRegistrator)">
            <summary>
            添加默认Rpc服务器提供者
            </summary>
            <param name="registrator"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.RpcParserExtension">
            <summary>
            RpcParserExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcStoreExtension">
            <summary>
            RpcStoreExtensions
            </summary>
        </member>
        <member name="F:TouchSocket.Rpc.RpcStoreExtension.DynamicallyAccessed">
            <summary>
            DynamicallyAccessed
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterAllServer(TouchSocket.Rpc.RpcStore)">
            <summary>
            注册<see cref="T:System.AppDomain"/>已加载程序集的所有Rpc服务
            </summary>
            <returns>返回搜索到的服务数</returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterAllServer(TouchSocket.Rpc.RpcStore,System.Reflection.Assembly)">
            <summary>
            注册指定程序集的Rpc服务。
            </summary>
            <param name="rpcStore"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterServer``1(TouchSocket.Rpc.RpcStore)">
            <summary>
            注册服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterServer(TouchSocket.Rpc.RpcStore,System.Type)">
            <summary>
            注册服务
            </summary>
            <param name="rpcStore"></param>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterServer``2(TouchSocket.Rpc.RpcStore)">
            <summary>
            注册服务
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcStoreExtension.RegisterServer``1(TouchSocket.Rpc.RpcStore,``0)">
            <summary>
            注册为单例服务
            </summary>
            <typeparam name="TFrom"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.ICallContext">
            <summary>
            Rpc调用上下文
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ICallContext.Caller">
            <summary>
            调用此服务的主体。
            <para>
            <list type="bullet">
            <item>当该服务在ITcpService及派生中调用时，该值一般为ISocketClient对象。</item>
            <item>当该服务在ITcpClient及派生中调用时，该值一般为ITcpClient对象。</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ICallContext.RpcMethod">
            <summary>
            本次调用的<see cref="P:TouchSocket.Rpc.ICallContext.RpcMethod"/>
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ICallContext.Token">
            <summary>
            可取消的调用令箭
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ICallContext.Cancel">
            <summary>
            执行取消<see cref="P:TouchSocket.Rpc.ICallContext.Token"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.IInvokeOption">
            <summary>
            调用配置接口
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.IInvokeOption.Token">
            <summary>
            可以取消的调用令箭
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.IInvokeOption.FeedbackType">
            <summary>
            调用反馈
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.IInvokeOption.Timeout">
            <summary>
            调用超时
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.IRemoteServer">
            <summary>
            远程服务接口
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.IRemoteServer.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.IRpcClient">
            <summary>
            Rpc接口
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.Invoke(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="returnType"></param>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="returnType"></param>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="types">对应类型集合</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.Invoke(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.InvokeAsync(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcClient.InvokeAsync(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="returnType">返回值类型</param>
            <param name="invokeKey">调用键</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">Rpc异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="T:TouchSocket.Rpc.IRpcServer">
            <summary>
            Rpc服务接口
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.IRpcServerProvider">
            <summary>
            IRpcServerProvider
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcServerProvider.Execute(TouchSocket.Rpc.ICallContext,System.Object[])">
            <summary>
            执行Rpc
            </summary>
            <param name="callContext"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcServerProvider.ExecuteAsync(TouchSocket.Rpc.ICallContext,System.Object[])">
            <summary>
            异步执行Rpc
            </summary>
            <param name="callContext"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.IRpcServerProvider.GetMethods">
            <summary>
            获取所有Method
            </summary>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Rpc.ITargetRpcClient">
            <summary>
            ITargetRpcClient
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.InvokeAsync(System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.InvokeAsync(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="returnType"></param>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey"></param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey"></param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="returnType"></param>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey"></param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey"></param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
        </member>
        <member name="M:TouchSocket.Rpc.ITargetRpcClient.Invoke(System.Type,System.String,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            调用对应Id的客户端Rpc
            </summary>
            <param name="returnType"></param>
            <param name="targetId">客户端Id</param>
            <param name="invokeKey"></param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:TouchSocket.Rpc.RpcInvokeException">调用内部异常</exception>
            <exception cref="T:System.Exception">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="T:TouchSocket.Rpc.ITransientRpcServer">
            <summary>
            Rpc服务接口
            </summary>
        </member>
        <member name="P:TouchSocket.Rpc.ITransientRpcServer.CallContext">
            <summary>
            调用上下文
            </summary>
        </member>
        <member name="T:TouchSocket.Rpc.RpcRealityProxy`3">
            <summary>
            Rpc透明代理
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxy`3.#ctor">
            <summary>
            RpcRealityProxy
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxy`3.GetClient">
            <summary>
            获取调用Rpc的客户端。
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxy`3.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            调用过程
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxy`3.OnBefore(System.Reflection.MethodInfo,System.String,System.Object[]@)">
            <summary>
            方法调用前
            </summary>
            <param name="method"></param>
            <param name="invokeKey"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxy`3.OnAfter(System.Reflection.MethodInfo,System.String,System.Object[]@,System.Object@)">
            <summary>
            方法调用后
            </summary>
            <param name="method"></param>
            <param name="invokeKey"></param>
            <param name="args"></param>
            <param name="result"></param>
        </member>
        <member name="T:TouchSocket.Rpc.RpcRealityProxyBase`1">
            <summary>
            RpcRealityProxyBase
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxyBase`1.#ctor">
            <summary>
            RpcRealityProxyBase
            </summary>
        </member>
        <member name="M:TouchSocket.Rpc.RpcRealityProxyBase`1.GetTransparentProxy">
            <summary>
            返回当前实例的透明代理。
            </summary>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Core.RpcPluginManagerExtension">
            <summary>
            RpcPluginManagerExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketRpcResource">
            <summary>
            TouchSocketRpc资源枚举
            </summary>
        </member>
    </members>
</doc>
