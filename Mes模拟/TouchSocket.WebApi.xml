<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.WebApi</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.WebApi.EnableCorsAttribute">
            <summary>
            适用于WebApi的跨域特性
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.EnableCorsAttribute.#ctor(System.String)">
            <summary>
            适用于WebApi的跨域特性
            </summary>
            <param name="policyName">跨域策略名称</param>
        </member>
        <member name="P:TouchSocket.WebApi.EnableCorsAttribute.PolicyName">
            <summary>
            跨域策略名称
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.EnableCorsAttribute.ExecutedAsync(TouchSocket.Rpc.ICallContext,System.Object[],TouchSocket.Rpc.InvokeResult)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.WebApi.RouterAttribute">
            <summary>
            表示WebApi路由。
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.RouterAttribute.#ctor(System.String)">
            <summary>
            表示WebApi路由。
            该模板在用于方法时，会覆盖类的使用。
            模板必须由“/”开始，如果没有设置，会自动补齐。
            模板不支持参数约定，仅支持方法路由。
            <para>模板有以下约定：
            <list type="number">
            <item>不区分大小写</item>
            <item>以“[Api]”表示当前类名，如果不包含此字段，则意味着会使用绝对设置</item>
            <item>以“[Action]”表示当前方法名，如果不包含此字段，则意味着会使用绝对设置</item>
            </list>
            </para>
            </summary>
            <param name="routeTemple"></param>
        </member>
        <member name="P:TouchSocket.WebApi.RouterAttribute.RouteTemple">
            <summary>
            路由模板。
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiAttribute">
            <summary>
            WebApiAttribute
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiAttribute.#ctor(TouchSocket.WebApi.HttpMethodType)">
            <summary>
            使用指定函数的WebApi特性。
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiAttribute.#ctor">
            <summary>
            使用Get函数的WebApi特性
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiAttribute.Method">
            <summary>
            请求函数类型。
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiAttribute.GetGenericConstraintTypes">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiAttribute.GetInvokenKey(TouchSocket.Rpc.RpcMethod)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiAttribute.GetRouteUrls(TouchSocket.Rpc.RpcMethod)">
            <summary>
            获取路由路径。
            <para>路由路径的第一个值会被当做调用值。</para>
            </summary>
            <param name="rpcMethod"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.WebApi.ActionResult">
            <summary>
            结果状态
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.ActionResult.Status">
            <summary>
            状态类型
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.ActionResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiCallContext">
            <summary>
            WebApi调用上下文
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiCallContext.HttpContext">
            <summary>
            Http上下文
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiClient">
            <summary>
            WebApi客户端
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiClient.Converter">
            <summary>
            字符串转化器
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.Invoke(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[]@,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.Invoke(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.Invoke(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.InvokeAsync(System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiClient.InvokeAsync(System.Type,System.String,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.WebApi.HttpMethodType">
            <summary>
            请求函数类型
            </summary>
        </member>
        <member name="F:TouchSocket.WebApi.HttpMethodType.GET">
            <summary>
            以GET方式。支持调用上下文。
            <para>以该方式时，所有的参数类型必须是基础类型。所有的参数来源均来自url参数。</para>
            </summary>
        </member>
        <member name="F:TouchSocket.WebApi.HttpMethodType.POST">
            <summary>
            以Post方式。支持调用上下文。
            <para>以该方式时，可以应对以下情况：</para>
            <list type="bullet">
            <item>仅有一个参数时，该参数可以为任意类型，且参数来源为Body</item>
            <item>当有多个参数时，最后一个参数可以为任意类型，且参数来源为Body，其余参数均必须是基础类型，且来自url参数。</item>
            </list>
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiEventArgs">
            <summary>
            WebApiEventArgs
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiEventArgs.#ctor(TouchSocket.Http.HttpRequest,TouchSocket.Http.HttpResponse)">
            <summary>
            WebApiEventArgs
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiEventArgs.IsHttpMessage">
            <summary>
            是否以HttpMessage请求
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiEventArgs.Request">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiEventArgs.Response">
            <summary>
            Http响应
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.IHttpCallContext">
            <summary>
            IHttpCallContext
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.IHttpCallContext.HttpContext">
            <summary>
            Http上下文
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.IWebApiCallContext">
            <summary>
            IWebApiCallContext
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.IWebApiClient">
            <summary>
            IWebApiClient
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.IWebApiClientBase">
            <summary>
            IWebApiClientBase
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.IWebApiPlugin`1">
            <summary>
            IWebApiPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.IWebApiPlugin`1.OnRequest(`0,TouchSocket.WebApi.WebApiEventArgs)">
            <summary>
            在请求之前
            </summary>
            <param name="client"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.WebApi.IWebApiPlugin`1.OnResponse(`0,TouchSocket.WebApi.WebApiEventArgs)">
            <summary>
            在收到响应之后
            </summary>
            <param name="client"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.WebApi.IWebApiPlugin">
            <summary>
            IWebApiPlugin
            </summary>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiParserPlugin">
            <summary>
            WebApi解析器
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiParserPlugin.#ctor(TouchSocket.Rpc.IRpcServerProvider,TouchSocket.Core.IResolver)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiParserPlugin.Converter">
            <summary>
            转化器
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiParserPlugin.GetRouteMap">
            <summary>
            获取Get函数路由映射图
            </summary>
        </member>
        <member name="P:TouchSocket.WebApi.WebApiParserPlugin.PostRouteMap">
            <summary>
            获取Post函数路由映射图
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiParserPlugin.ConfigureConverter(System.Action{TouchSocket.WebApi.WebApiSerializerConverter})">
            <summary>
            配置转换器。可以实现json序列化或者xml序列化。
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiParserPlugin.Loaded(TouchSocket.Core.IPluginManager)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiRealityProxy`3">
            <summary>
            WebApiRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiRealityProxy`2">
            <summary>
            WebApiRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiRealityProxy`1">
            <summary>
            WebApiRealityProxy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TouchSocket.WebApi.WebApiSerializerConverter">
            <summary>
            适用于WebApi的序列化器
            </summary>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiSerializerConverter.Serialize(TouchSocket.Http.HttpContext,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiSerializerConverter.AddJsonSerializerFormatter(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            添加Json序列化器
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:TouchSocket.WebApi.WebApiSerializerConverter.AddXmlSerializerFormatter">
            <summary>
            添加Xml序列化器
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.WebApiConfigExtensions">
            <summary>
            WebApiConfigExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.WebApiConfigExtensions.BuildWithWebApiClient``1(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            构建WebApiClient类客户端，并连接
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.WebApiConfigExtensions.BuildWithWebApiClient(TouchSocket.Core.TouchSocketConfig)">
            <summary>
             构建WebApiClient类客户端，并连接
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Core.WebApiPluginManagerExtension">
            <summary>
            WebApiPluginManagerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Core.WebApiPluginManagerExtension.UseWebApi(TouchSocket.Core.IPluginManager)">
            <summary>
            使用WebApi的插件。仅服务器可用。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketWebApiResource">
            <summary>
            TouchSocketWebApi资源枚举
            </summary>
        </member>
    </members>
</doc>
